import random
import time

class Character:
    def __init__(self, name, health, attack, defense, inventory=None):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.inventory = inventory if inventory else []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        enemy.take_damage(damage)

    def heal(self, amount):
        self.health += amount
        print(f"{self.name} heals for {amount} points!")

    def add_to_inventory(self, item):
        self.inventory.append(item)
        print(f"{item} added to inventory.")

    def show_inventory(self):
        if self.inventory:
            print(f"Inventory: {', '.join(self.inventory)}")
        else:
            print("Your inventory is empty.")

class Enemy:
    def __init__(self, name, health, attack, defense, loot=None):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.loot = loot if loot else []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_character(self, character):
        damage = self.attack - character.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {character.name} for {damage} damage!")
        character.take_damage(damage)

    def drop_loot(self):
        return self.loot if random.random() > 0.5 else []

class Game:
    def __init__(self, player):
        self.player = player
        self.enemies = []
        self.locations = {
            "forest": "A dense forest filled with wild creatures.",
            "village": "A small, peaceful village.",
            "castle": "A dark and ominous castle.",
        }
        self.current_location = "village"

    def move_to(self, location):
        if location in self.locations:
            self.current_location = location
            print(f"\nYou have arrived at the {location}.")
            print(self.locations[location])
        else:
            print("Unknown location.")

    def encounter_enemy(self, enemy):
        print(f"A wild {enemy.name} appears!")
        while self.player.is_alive() and enemy.is_alive():
            action = input(f"Do you want to fight the {enemy.name} or flee? (fight/flee): ").lower()
            if action == "fight":
                self.player.attack_enemy(enemy)
                if enemy.is_alive():
                    enemy.attack_character(self.player)
            elif action == "flee":
                print(f"You flee from the {enemy.name}.")
                break
            else:
                print("Invalid action. Please choose 'fight' or 'flee'.")
            
            time.sleep(1)

        if not self.player.is_alive():
            print("You have been defeated!")
        elif not enemy.is_alive():
            loot = enemy.drop_loot()
            if loot:
                print(f"You defeated the {enemy.name} and obtained: {', '.join(loot)}")
                for item in loot:
                    self.player.add_to_inventory(item)

    def start(self):
        print(f"Welcome to the game, {self.player.name}!")
        print("You are in the village. Choose where to go.")
        while self.player.is_alive():
            print("\nCurrent Location:", self.current_location)
            action = input("Do you want to move to a new location, check your inventory, or quit? (move/inventory/quit): ").lower()

            if action == "move":
                location = input("Where do you want to go? (forest/village/castle): ").lower()
                self.move_to(location)
                if self.current_location == "forest":
                    enemy = Enemy("Goblin", 50, 10, 3, ["Goblin's Sword"])
                    self.encounter_enemy(enemy)
                elif self.current_location == "castle":
                    enemy = Enemy("Dragon", 100, 25, 5, ["Dragon's Scale"])
                    self.encounter_enemy(enemy)
            elif action == "inventory":
                self.player.show_inventory()
            elif action == "quit":
                print("Thank you for playing!")
                break
            else:
                print("Invalid action. Please choose 'move', 'inventory', or 'quit'.")

# Sample game setup and starting
if __name__ == "__main__":
    player_name = input("Enter your character's name: ")
    player = Character(name=player_name, health=100, attack=15, defense=5)
    game = Game(player)
    game.start()




import random
import time

# ----- Class Definitions -----

class Character:
    def __init__(self, name, health, attack, defense, inventory=None, level=1, experience=0):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.inventory = inventory if inventory else []
        self.level = level
        self.experience = experience

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        enemy.take_damage(damage)

    def heal(self, amount):
        self.health += amount
        print(f"{self.name} heals for {amount} points!")

    def add_to_inventory(self, item):
        self.inventory.append(item)
        print(f"{item} added to inventory.")

    def show_inventory(self):
        if self.inventory:
            print(f"Inventory: {', '.join(self.inventory)}")
        else:
            print("Your inventory is empty.")

    def gain_experience(self, points):
        self.experience += points
        print(f"{self.name} gains {points} experience!")
        self.level_up()

    def level_up(self):
        while self.experience >= self.level * 100:
            self.level += 1
            self.attack += 2
            self.defense += 2
            self.health += 10
            self.experience -= 100
            print(f"{self.name} leveled up to level {self.level}!")

class Enemy:
    def __init__(self, name, health, attack, defense, loot=None):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.loot = loot if loot else []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_character(self, character):
        damage = self.attack - character.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {character.name} for {damage} damage!")
        character.take_damage(damage)

    def drop_loot(self):
        if random.random() > 0.5 and self.loot:
            return self.loot
        return []

class Quest:
    def __init__(self, title, description, reward, target_enemy):
        self.title = title
        self.description = description
        self.reward = reward
        self.target_enemy = target_enemy
        self.completed = False

    def complete_quest(self):
        self.completed = True
        print(f"Quest '{self.title}' completed! You receive: {self.reward}")
        return self.reward

    def show_quest_info(self):
        print(f"Quest: {self.title}\nDescription: {self.description}\nReward: {self.reward}")

class Game:
    def __init__(self, player):
        self.player = player
        self.enemies = []
        self.locations = {
            "forest": "A dense forest filled with wild creatures.",
            "village": "A small, peaceful village.",
            "castle": "A dark and ominous castle.",
            "dungeon": "A creepy dungeon filled with danger.",
            "mountain": "A tall mountain with treacherous paths."
        }
        self.current_location = "village"
        self.quests = []
        self.completed_quests = []
        self.generate_quests()

    def generate_quests(self):
        # Generate some sample quests for the game
        quest1 = Quest("Slay the Goblin", "Defeat the goblin in the forest", "100 gold", "Goblin")
        quest2 = Quest("Rescue the Princess", "Find the princess in the castle and rescue her", "500 gold, healing potion", "Dragon")
        quest3 = Quest("Explore the Dungeon", "Explore the dungeon and return with a treasure", "Magic Sword", "Skeleton Warrior")
        self.quests.extend([quest1, quest2, quest3])

    def move_to(self, location):
        if location in self.locations:
            self.current_location = location
            print(f"\nYou have arrived at the {location}.")
            print(self.locations[location])
        else:
            print("Unknown location.")

    def encounter_enemy(self, enemy):
        print(f"A wild {enemy.name} appears!")
        while self.player.is_alive() and enemy.is_alive():
            action = input(f"Do you want to fight the {enemy.name} or flee? (fight/flee): ").lower()
            if action == "fight":
                self.player.attack_enemy(enemy)
                if enemy.is_alive():
                    enemy.attack_character(self.player)
            elif action == "flee":
                print(f"You flee from the {enemy.name}.")
                break
            else:
                print("Invalid action. Please choose 'fight' or 'flee'.")
            
            time.sleep(1)

        if not self.player.is_alive():
            print("You have been defeated!")
        elif not enemy.is_alive():
            loot = enemy.drop_loot()
            if loot:
                print(f"You defeated the {enemy.name} and obtained: {', '.join(loot)}")
                for item in loot:
                    self.player.add_to_inventory(item)
                self.player.gain_experience(50)

    def start(self):
        print(f"Welcome to the game, {self.player.name}!")
        print("You are in the village. Choose where to go.")
        while self.player.is_alive():
            print("\nCurrent Location:", self.current_location)
            action = input("Do you want to move to a new location, check your inventory, view quests, or quit? (move/inventory/quests/quit): ").lower()

            if action == "move":
                location = input("Where do you want to go? (forest/village/castle/dungeon/mountain): ").lower()
                self.move_to(location)
                if self.current_location == "forest":
                    enemy = Enemy("Goblin", 50, 10, 3, ["Goblin's Sword"])
                    self.encounter_enemy(enemy)
                elif self.current_location == "castle":
                    enemy = Enemy("Dragon", 100, 25, 5, ["Dragon's Scale"])
                    self.encounter_enemy(enemy)
                elif self.current_location == "dungeon":
                    enemy = Enemy("Skeleton Warrior", 80, 15, 5, ["Skeleton's Shield"])
                    self.encounter_enemy(enemy)
                elif self.current_location == "mountain":
                    enemy = Enemy("Mountain Troll", 120, 30, 10, ["Troll's Hammer"])
                    self.encounter_enemy(enemy)
            elif action == "inventory":
                self.player.show_inventory()
            elif action == "quests":
                self.view_quests()
            elif action == "quit":
                print("Thank you for playing!")
                break
            else:
                print("Invalid action. Please choose 'move', 'inventory', 'quests', or 'quit'.")

    def view_quests(self):
        print("\nActive Quests:")
        for idx, quest in enumerate(self.quests):
            if not quest.completed:
                print(f"{idx + 1}. {quest.title}")
                quest.show_quest_info()
                action = input(f"Do you want to accept quest '{quest.title}'? (yes/no): ").lower()
                if action == "yes":
                    print(f"You have accepted the quest '{quest.title}'.")
                    self.start_quest(quest)
                    break

    def start_quest(self, quest):
        if quest.target_enemy == "Goblin":
            enemy = Enemy("Goblin", 50, 10, 3, ["Goblin's Sword"])
            self.encounter_enemy(enemy)
        elif quest.target_enemy == "Dragon":
            enemy = Enemy("Dragon", 100, 25, 5, ["Dragon's Scale"])
            self.encounter_enemy(enemy)
        elif quest.target_enemy == "Skeleton Warrior":
            enemy = Enemy("Skeleton Warrior", 80, 15, 5, ["Skeleton's Shield"])
            self.encounter_enemy(enemy)

        if quest.target_enemy == "Dragon" and not quest.completed:
            quest.complete_quest()
            self.completed_quests.append(quest)
            self.quests.remove(quest)

# ----- Game Setup -----

if __name__ == "__main__":
    player_name = input("Enter your character's name: ")
    player = Character(name=player_name, health=100, attack=15, defense=5)
    game = Game(player)
    game.start()




import random
import time

# ----- Class Definitions -----

class Character:
    def __init__(self, name, health, attack, defense, inventory=None, level=1, experience=0):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.inventory = inventory if inventory else []
        self.level = level
        self.experience = experience

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        enemy.take_damage(damage)

    def heal(self, amount):
        self.health += amount
        print(f"{self.name} heals for {amount} points!")

    def add_to_inventory(self, item):
        self.inventory.append(item)
        print(f"{item} added to inventory.")

    def show_inventory(self):
        if self.inventory:
            print(f"Inventory: {', '.join(self.inventory)}")
        else:
            print("Your inventory is empty.")

    def gain_experience(self, points):
        self.experience += points
        print(f"{self.name} gains {points} experience!")
        self.level_up()

    def level_up(self):
        while self.experience >= self.level * 100:
            self.level += 1
            self.attack += 2
            self.defense += 2
            self.health += 10
            self.experience -= 100
            print(f"{self.name} leveled up to level {self.level}!")

class Enemy:
    def __init__(self, name, health, attack, defense, loot=None):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.loot = loot if loot else []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_character(self, character):
        damage = self.attack - character.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {character.name} for {damage} damage!")
        character.take_damage(damage)

    def drop_loot(self):
        if random.random() > 0.5 and self.loot:
            return self.loot
        return []

class Quest:
    def __init__(self, title, description, reward, target_enemy):
        self.title = title
        self.description = description
        self.reward = reward
        self.target_enemy = target_enemy
        self.completed = False

    def complete_quest(self):
        self.completed = True
        print(f"Quest '{self.title}' completed! You receive: {self.reward}")
        return self.reward

    def show_quest_
import random
import time

class Character:
    def __init__(self, name, health, attack, defense):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.experience = 0

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_enemy(self, enemy):
        damage = self.attack - enemy.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        enemy.take_damage(damage)

    def gain_experience(self, points):
        self.experience += points
        print(f"{self.name} gains {points} experience!")

class Enemy:
    def __init__(self, name, health, attack, defense, loot=None):
        self.name = name
        self.health = health
        self.attack = attack
        self.defense = defense
        self.loot = loot if loot else []

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage):
        self.health -= max(0, damage)

    def attack_character(self, character):
        damage = self.attack - character.defense
        damage = max(0, damage)
        print(f"{self.name} attacks {character.name} for {damage} damage!")
        character.take_damage(damage)

    def drop_loot(self):
        if random.random() > 0.5 and self.loot:
            return self.loot
        return []

class Game:
    def __init__(self, player):
        self.player = player

    def start_combat(self, enemy):
        print(f"A wild {enemy.name} appears!")
        while self.player.is_alive() and enemy.is_alive():
            action = input("Do you want to (fight/flee)? ").lower()
            if action == "fight":
                self.player.attack_enemy(enemy)
                if enemy.is_alive():
                    enemy.attack_character(self.player)
            elif action == "flee":
                print(f"You flee from {enemy.name}.")
                break
            else:
                print("Invalid action.")

            time.sleep(1)

        if not self.player.is_alive():
            print("You have been defeated!")
        elif not enemy.is_alive():
            loot = enemy.drop_loot()
            if loot:
                print(f"You defeated {enemy.name} and obtained: {', '.join(loot)}")
            self.player.gain_experience(50)

    def play(self):
        print(f"Welcome {self.player.name} to the game!")
        while self.player.is_alive():
            action = input("Do you want to (explore/quit)? ").lower()
            if action == "explore":
                enemy = Enemy("Goblin", 50, 10, 3, ["Goblin's Sword"])
                self.start_combat(enemy)
            elif action == "quit":
                print("Thanks for playing!")
                break
            else:
                print("Invalid action.")
                
if __name__ == "__main__":
    player_name = input("Enter your character's name: ")
    player = Character(name=player_name, health=100, attack=15, defense=5)
    game = Game(player)
    game.play()

